
/*
CSS file gets parsed from top to bottom.However the specifity of a each selectors differ.In case of
class selector whether it's below the html element still the class selector takes precedence.

CSS Property references - https://developer.mozilla.org/en-US/docs/Web/CSS/Reference
*/

/*
  id selector
  performance of ids are great.
 */
#product-overview {
    /*background: #ff1b68;*/
    /*
      background shorthand
      background : arg1(linear gradient) , arg2(image background-position/background-size background-repeat background-origin background-clip), arg3(color os fallback color if image goes for a toss)
      Every comma separated argument has its own set of properties
      If you set only border-box it'll be set to both background-origin and background-clip
    */
    /*background: linear-gradient(to top, rgba(80,68,18,0.6) 10%, transparent), url("../images/freedom.jpg") left 10% bottom 75%/cover no-repeat border-box, #ff5454;*/
    background: linear-gradient(to top, rgba(80,68,18,0.6) 10%, transparent), url("../images/freedom.jpg") center/cover no-repeat border-box, #ff5454;

    /* Example of linear gradient
       background-image: arg1(angle) or arg1(direction),arg2(color) ...argn(color)
       linear-gradient(30deg,red,blue,green, yellow);
       linear-gradient(180deg,red,transparent);
       linear-gradient(180deg,red,rgba(0,0,0,0.15));
       Gradients are counted as images
    */
    /*background-image: linear-gradient(180deg,red 70%,rgba(0,0,0,0.15));*/
    /*
      radial-gradient(shape position, colors)
      radial-gradient(circle at top left,red,blue,green);
       radial-gradient(circle 20px at 20% 50%,red,blue,green);
       radial-gradient(ellipse farthest-side at 20% 50%,red,blue,green);
    */
    /*background-image: radial-gradient(ellipse closest-corner at 20% 50%,red,blue,green);*/
    /*background-image: url("freedom.jpg");*/
    /* background-size: width , height
       Instead of manually setting the width and height we can use 'cover' and 'contain'
       'cover' is as good as width of 100% sets to the width of container. image will have higher aspect ratio and fills the complete container
       'contain' ensures that the full image is available in container and here doesn't fill the entire container instead it ensures entire image is available
    */
   /* background-size: cover;*/
    /*
      background-position: x-axis(left edge),y-axis(top edge) eg: 0% 100%
      'center' means 50% is cut from left right top bottom
      'left' will be aligned to left of the container (means no cropping at the left). left 10% - Crop 10% to the left
      'top' will be aligned to the top of the container (means no cropping at the top).
      'bottom' will be aligned to the bottom of the container (means no cropping at the bottom) bottom 20% - Crop 20% to the top
    */
   /* background-position: left 10% bottom 20%;*/
    /*background-repeat: no-repeat;
    background-origin: border-box;*/
    /* border-box will clip the image from border. Actually background-clip overrides the background-origin */
    /*background-clip: border-box;*/
    /* dashed creates border with dotted lines */
   /* border: 5px dashed red;*/
   /* width: 100%;*/
    width: 100vw;
    /*height: 529px;*/
    /*
      vh - view port height
    */
    height: 60vh;
    /*padding: 10px;*/
   /* margin: 10px;
    border: 5px black solid;*/
   /* OR */
   /*
    border-style: solid;
    border-color: black;
    border-width: 5px;
    */
    /*margin-top: 43px;*/
    /*margin-top: 2.75rem;*/
    position: relative;
}

/*
   Descendant sibling example (Most commonly used combinator)
   id and tag combination selector
   Any h1 tag inside of a id selector 'product-overview' would get the below styling
   Combinator selectors have the highest specifity
   Rule with more information(#product-overview h1) wins over the rule with less information like h1 tag
*/
#product-overview h1 {
    color: white;
    font-family: 'Anton', sans-serif;
    position: absolute;
    bottom: 5%;
    left: 3%;
    font-size: 1.6rem;
}

/*
  max-width: 40rem means the media query should kick in only when the max-width of a device(viewport) is equal or < 40rem. (Desktop first approach)
  min-width: 40rem means the media query should kick in only when the min-width of a device(viewport) is equal or > 40rem. (Mobile first approach)
  Multiple media queries size should from start from lowest to highest i.e., 40rem -> 60rem ->100rem as CSS file is parsed from top to bottom
*/
/*@media (min-width: 40rem) and (orientation: portrait){*/
@media (min-width: 40rem) and (min-height: 40rem){
    #product-overview {
        height: 70vh;
        background-position: 50% 25%;
    }

    #product-overview h1 {
        font-size: 3rem;
    }
}

/*@media (min-width: 60rem) {*/
/*    #product-overview {*/
/*        height: 80vh;*/
/*        background-position: 50% 25%;*/
/*    }*/

/*    #product-overview h1 {*/
/*        font-size: 5rem;*/
/*    }*/
/*}*/

/* class selector
   performance of classes are great.
*/
.section-title {
    color: #2ddf5c;
    text-align: center;
    /*  The inherit would get the font-family from body
    font-family: inherit;
    */
}

/*.plan__list {*/
/*    !*  margin: auto works only for block level elements with an explicitly assigned width though  *!*/
/*    !*margin: auto;*!*/
/*    width: 100%;*/
/*    text-align: center;*/
/*}*/

.plan {
    background: #d5ffdc;
    text-align: center;
    /*padding: 16px;*/
    /*margin: 8px;*/
    padding: 1rem;
    margin: 0.5rem 0;
    /* Removed because we're designing mobile first web and want to display the plan in block in devices and will change work properly for desktop in media queries*/
    /*display: inline-block;*/
    width: 100%;
    /* This is to align all three plans in html to align in the middle */
    /*vertical-align: middle;*/
}

.plan--highlighted {
    background: #19b84c;
    color: white;
    /*
       box-shadow: 1argument(positioning of the shadow x-axis), 2arg(positioning of the shadow y-axis), 3arg(blurriness), 4arg(spread i.e., how much it should spread), 5arg(shadow color)
       rgba - r is red, g is green, b is blue and a is alpha channel .i.e., transparency of the color (1 means opaque and 0 means transparent)
    */
    /*box-shadow: 2px 2px 2px 2px rgba(0,0,0,0.5);*/
}

.plan__annotation {
    background: white;
    color: #19b84c;
    /*padding: 8px;*/
    padding: 0.5rem;
    box-shadow: 2px 2px 2px 2px rgba(0,0,0,0.5);
    border-radius: 8px;
}

.plan__title {
    color: darkgreen;
}

.plan__price {
    color: rgb(85,85,85);
}

.plan__features {
    list-style: none;
    margin: 0;
    padding: 0;
}

.plan__feature {
    /*margin: 8px 0;*/
    margin: 0.5rem 0;
}

.plan--highlighted .plan__title {
    color: white;
}
.plan--highlighted .plan__price {
    color: darkgreen;
}
/*
   'and' means both min-width, orientation should match
   ',' means either of the min-width, orientation should match
*/
/*@media (min-width: 40rem) and (orientation: landscape){*/
@media (min-width: 40rem) {
    .plan__list {
        width: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .plan {
        /*display: inline-block;*/
        width: 30%;
        min-width: 13rem;
        max-width: 25rem;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 28rem;
    }

    .plan--highlighted {
        box-shadow: 2px 2px 2px 2px rgba(0,0,0,0.5);
        height: 30rem;
        z-index: 50;
    }
}

#key-features {
    background: #ff1b68;
    /*margin-top: 80px;*/
    /*padding: 16px;*/
    margin-top: 5rem;
    padding: 1rem;
}

#key-features .section-title {
    color: white;
    /*margin: 32px;*/
    margin: 2rem;
}

.key-feature__list {
    list-style: none;
    margin: 0;
    padding: 0;
    text-align: center;
}

.key-feature {
    display: block;
    width: 100%;
    vertical-align: middle;
}

/*  The CSS to create the circle. border-radius: 50% and height: 128px would give the circle*/
.key-feature__image {
    background: #ffcede;
    width: 128px;
    border: 2px solid #424242;
    border-radius: 50%;
    height: 128px;
    /* 'auto' will fill the available space automatically to the right and left and center it */
    margin: auto;
    /*padding: 20px   ;*/
    padding: 1.5rem;
}

.key-feature__description {
    text-align: center;
    font-weight: bold;
    color: white;
    /*font-size: 20px;*/
    font-size: 1.2rem;
}

@media (min-width: 40rem) {
    .key-feature {
        /*display: inline-block;*/
        width: 30%;
        /*vertical-align: top;*/
        max-width: 25rem;
    }

    .key-feature__list {
        display: flex;
        justify-content: center;
    }

}

/*
Adjacent(direct) sibling example
Any p tags immediately after h1 tag would get the colour red

h1 + p {
    color: red;
}
*/

/*
General sibling example
Any p tags after h1 tag would get the colour red but need not be immediate element.Both h1 and p just needs to share the same parent.

h1 ~ p {
    color: red;
}
*/

/*
Child sibling example
Any p tags which is a direct child of h1 tag irrespective of the position would get the colour red
Second element(p here) is a direct child of first element(h1 here)

h1 > p {
    color: red;
}
*/

/* html element selector */
/*h1 {
    font-family: Anton;
     color: white;
}*/

/*
This h1 selector takes precedence compared to any h1 selector up the CSS file.
 */
 /*h1 {
    font-family: sans-serif;
}*/

.modal {
    position: fixed;
    /*display: none;*/
    /* Hides the modal */
    opacity: 0;
    transform: translateY(-3rem);
    transition: opacity 0.5s ease-out 1s, transform 200ms cubic-bezier(0.32, 0, 0.67, 0);
    z-index: 200;
    top: 20%;
    left: 30%;
    width: 40%;
    background: white;
    padding: 1rem;
    border: 1px solid #ccc;
    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.5);
}

.modal__title {
    text-align: center;
    margin: 0 0 1rem 0;
}

.modal__actions {
    text-align: center;
}

.modal__action {
    border: 1px solid #0e4f1f;
    background: #0e4f1f;
    text-decoration: none;
    color: white;
    font: inherit;
    padding: 0.5rem 1rem;
    cursor: pointer;
}

.modal__action:hover,
.modal__action:active {
    background: #2ddf5c;
    border-color: #2ddf5c;
}

.modal__action--negative {
    background: red;
    border-color: red;
}

.modal__action--negative:hover,
.modal__action--negative:active {
    background: #ff5454;
    border-color: #ff5454;
}



